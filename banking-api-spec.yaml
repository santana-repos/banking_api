openapi: 3.0.3
info:
  title: Banking System API
  version: 2.2.3
  description: API for managing banking accounts, persons and organizations.
  contact:
    email: info@banking.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://sandbox-fake.openbanking.com/sandbox/banking-system-api/v1
    description: SANDBOX
    variables:
      host:
        default: sandbox-fake.openbanking.com
      basePath:
        default: /banking-system-api/v1
tags:
  - name: persons
    description: Persons group of operations
  - name: organizations
    description: Organizations group of operations
  - name: bank-accounts
    description: Bank Accounts group of operations
          
paths:
  /persons:
    post:
      operationId: createPerson
      security:
        - OAuth2:
          - write_banking_persons
      summary: Create a new person
      tags:
      - persons
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPerson'
      responses:
        '201':
          description: Person created successfully
          headers:
            location:
              schema:
                type: string
                format: url
              example:  /persons/PABC123
        '400':
          $ref: "#/components/responses/400"
        '500':
          $ref: '#/components/responses/500'
  /persons/{personId}:
    get:
      operationId: retrievePersonById
      security:
        - OAuth2:
          - read_banking
          - read_banking_persons
      summary: Get a specific person
      tags:
      - persons
      parameters:
        - $ref: '#/components/parameters/PersonId'
      responses:
        '200':
          description: Person found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
    patch:
      operationId: updatePersonData
      security:
        - OAuth2:
          - write_banking_persons
      summary: Update a person
      tags:
      - persons
      parameters:
        - $ref:  '#/components/parameters/PersonId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
    delete:
      operationId: deletePerson
      security:
        - OAuth2:
          - write_banking_persons
      summary: Delete a person
      tags:
      - persons
      parameters:
        - $ref: '#/components/parameters/PersonId'
      responses:
        '204':
          description: Person deleted successfully
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
  /organizations:
    post:
      operationId: createOrganization
      security:
        - OAuth2:
          - write_banking_organiations
      summary: Create a new organization
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewOrganization'
      responses:
        '201':
          description: Organization created successfully
          headers:
            location:
              schema:
                type: string
                format: url
              example:  /organizations/PYZC877
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  /organizations/{organizationId}:
    get:
      operationId: retrieveOrganizationById
      security:
        - OAuth2:
          - read_banking
          - read_banking_organiations
      summary: Get a specific organization
      tags:
      - organizations
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
      responses:
        '200':
          description: Organization found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
    patch:
      operationId: updateOrganization
      security:
        - OAuth2:
          - write_banking_organiations
      summary: Update an organization
      tags:
      - organizations
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
    delete:
      operationId: deleteOrganization
      security:
        - OAuth2:
          - write_banking_organiations
      summary: Delete an organization
      tags:
      - organizations
      parameters:
        - $ref: '#/components/parameters/OrganizationId'
      responses:
        '204':
          description: Organization deleted successfully
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
  /bank-accounts:
    post:
      operationId: createBankAccount
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Create a new bank account
      tags:
      - bank-accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      responses:
        '201':
          description: Bank account created successfully
          headers:
            location:
              schema:
                type: string
                format: url
              example:  /bank-accounts/b67e71ff-3dab-4b60-8452-078775f3d783
        '404':
          $ref: '#/components/responses/404_no_body'
        '500':
          $ref: '#/components/responses/500'
  /bank-accounts/{accountId}:
    get:
      operationId: retrieveBankAccountById
      security:
        - OAuth2:
          - read_banking_accounts
      summary: Get a specific bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
      responses:
        '200':
          description: Bank account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '404':
          description: Bank account not found
        '500':
          description: Internal server error
    patch:
      operationId: updateBankAccount
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Update a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
      responses:
        '200':
          description: Bank account updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: Bank account not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteBankAccount
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Delete a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
      responses:
        '204':
          description: Bank account deleted successfully
        '404':
          description: Bank account not found
        '500':
          description: Internal server error
  /bank-accounts/{accountId}/account-holders:
    post:
      operationId: addAccountHolder
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Add a new account holder to a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewAccountHolder'
      responses:
        '201':
          description: Account holder added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: Bank account not found
        '500':
          description: Internal server error
    get:
      operationId: retrieveAccountHoldersByAccountId
      security:
        - OAuth2:
          - read_banking_accounts
      summary: Get all account holders of a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
      responses:
        '200':
          description: List of account holders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountHolder'
        '404':
          description: Bank account not found
        '500':
          description: Internal server error
  /bank-accounts/{accountId}/account-holders/{accountHolderId}:
    get:
      operationId: retrieveAccountHolderById
      security:
        - OAuth2:
          - read_banking_accounts
      summary: Get a specific account holder of a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
        - $ref:  '#/components/parameters/AccountHolderId'
      responses:
        '200':
          description: Account holder found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
        '404':
          description: Account holder or bank account not found
        '500':
          description: Internal server error
    patch:
      operationId: updateAccountHolder
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Update an account holder of a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
        - $ref:  '#/components/parameters/AccountHolderId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountHolder'
      responses:
        '200':
          description: Account holder updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
        '400':
          $ref: '#/components/responses/400'
        '404':
          description: Account holder or bank account not found
        '500':
          description: Internal server error
    delete:
      operationId: deleteAccountHolder
      security:
        - OAuth2:
          - write_banking_accounts
      summary: Delete an account holder from a bank account
      tags:
      - bank-accounts
      parameters:
        - $ref:  '#/components/parameters/AccountId'
        - $ref:  '#/components/parameters/AccountHolderId'
      responses:
        '204':
          description: Account holder deleted successfully
        '404':
          description: Account holder or bank account not found
        '500':
          description: Internal server error
components:
  responses:
    '400':
      description: Invalid data provided
      content:
        application/json:
          schema:
            type: string
            example:
              error: >-
                Invalid data provided
    '401':
      description: 'Invalid credentials'
      content:
        application/json:
          schema:
            type: string
            example:
              error: >-
                Could not find a required Access Token in the request,
                identified by HEADER Authorization
    '403':
      description: 'The credentials dont have the authorization to perform this operation'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 'Forbidden'
    404_no_body:
      description: 'Not found'
      content:
        application/json:
          schema:
            type: string
            example: {}
    '500':
      description: Server exception'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: 'Internal server Error'
  parameters:
    PersonId:
      name: personId
      in: path
      required: true
      schema:
        type: string
        example: PABC123
    OrganizationId:
      name: organizationId
      in: path
      required: true
      schema:
        type: string
        example: PYZC877
    AccountId:
      name: accountId
      in: path
      required: true
      schema:
        type: string
        example: b67e71ff-3dab-4b60-8452-078775f3d783
    AccountHolderId:
      name: accountHolderId
      in: path
      required: true
      schema:
        type: string
        example: de6b5e4d-db8f-416f-bb3d-b3bb4a8758cd
  schemas:
    Party:
      type: object
      properties:
        partyId:
          type: string
          format: uuid
          example: 47a20287-0328-41d6-8a4e-420d2b638de7
    NewPerson:
      allOf:
        - type: object
          properties:
            firstName:
              type: string
              description: First name of the person
              example: John
            lastName:
              type: string
              description: Last name of the person
              example: Doe
            dateOfBirth:
              type: string
              format: date
              description: Date of birth of the person
              example: 1980-01-01
        - $ref:  '#/components/schemas/Party'
    Person:
      allOf:
        - type: object
          properties:
            personId:
              description: A unique and immutable identifier used to identify the person resource.
              type: string
              example: PABC123
        - $ref: '#/components/schemas/NewPerson'              
    NewOrganization:
      allOf:
        - type: object
          properties:
            name:
              type: string
              description: Name of the organization
              example: Acme Corporation
            registrationNumber:
              type: string
              description: Registration number of the organization
              example: 123456789
        - $ref:   '#/components/schemas/Party'
    Organization:  
      allOf:
        - type: object
          properties:
            personId:
              description: A unique and immutable identifier used to identify the organization resource.
              type: string
              example: PYZC877
        - $ref: '#/components/schemas/NewOrganization'          
    BankAccount:
      type: object
      properties:
        accountNumber:
          type: string
          description: Account number of the bank account
          format: uuid
          example: b67e71ff-3dab-4b60-8452-078775f3d783
        accountType:
          type: string
          description: Type of bank account (e.g., Checking, Savings)
          enum:
            - CHECKING
            - SAVINGS
          example: CHECKING
        balance:
          type: number
          format: float
          description: Balance of the bank account
          example: 1000.00
    NewAccountHolder:
      type: object
      properties:
        accountId:
          type: string
          description: ID of the bank account
          example: b67e71ff-3dab-4b60-8452-078775f3d783
        account-holders:
          type: array
          items:
            type: object
            properties:
              partyId:
                type: string
                description: Party ID (e.g. person or organization)
                format: uuid
                example: 47a20287-0328-41d6-8a4e-420d2b638de7
              roles:
                type: array
                items:
                  $ref: '#/components/schemas/AccountRole'
    AccountHolder:
      allOf:
      - type: object
        properties:
          accountHolderId:
            type: string
            description: account holder ID
            example: de6b5e4d-db8f-416f-bb3d-b3bb4a8758cd
      - $ref: '#/components/schemas/NewAccountHolder'
    AccountRole:
      type: object
      properties:
        role:
          type: string
          description: Role of the account holder (e.g., Principal, Manager, Beneficiary)
          enum:
            - PRINCIPAL
            - MANAGER
            - BENEFICIARY
          example: PRINCIPAL
        effectiveDate:
          type: string
          format: date
          description: Effective date of the account holder's role
          example: 2023-04-01
    Error:
      type: object
      properties:
        error:
          type: string
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://sandbox-fake.openbanking.com/oauth/token
          scopes:
            read_banking: allows reading the banking generic resources
            read_banking_persons: allows reading banking persons resource
            write_banking_persons: allows write banking persons resource
            read_banking_organiations: allows reading banking organiations resource
            write_banking_organiations: allows write banking organiations resource
            read_banking_accounts: allows read banking accounts resource
            write_banking_accounts: allows write banking accounts resource